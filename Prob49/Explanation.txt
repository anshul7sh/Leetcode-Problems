Approach 1:-

Let N be number of words and L be the average length of the words. Than 

Time Complexity:-O(N*L*log(L))
space Complexity:-O(N).
    
Approach:-
Initially we will make a unordered map named temp. 
Now we used to itterate the str and storing the string into a temporary variable named curr and go for its soring. After sorting we will check that is the curr was initially present in the map or not. If it was than we will add that string str[i] to the map of the key curr else if it was not than we will make a new key named curr and add the string as it's value. After all these we will push back all the string with same key into the same vector and hence will push whole map into a vector of vector of string named res and at last will return res giving us final result.


Approach 2:-


Same as that of above one but the difference is present only when we are sorting the number than for this time it's complexity will be O(L).

Hence Time Complexity:- O(N*L).